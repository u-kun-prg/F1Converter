-------------------------------------------------------------------------------
F1 Converter
-------------------------------------------------------------------------------

F1 Converterは、テキスト形式のF1Tファイル（*.f1t）を
バイナリ形式のF1に変換するツールです。

F1 Converterは、vgm, s98, mdx の３つの形式のオーディオ
ファイルを、F1ファイルとF1Tファイルに変換することができます。

F1 Converterは、デバッグ用のテキスト化されたＦ１ファイルと
F1ファイルのテキストダンプファイルを出力することができます。

F1 Converterは、vgm, s98, mdxを変換する際に､
レジスタアクセスの削減によるデータの縮小化や、マスタークロックに
合わせた音程変換、簡単な音量変換、などのターゲットハードウェアに
合わせたレジスタアクセスの制御を行うことができます。

F1 Converterは、PCにシリアル接続されているArduino Uno R3、
Arduino Mega 2560 R3 のフラッシュメモリにアップロードする
ことができます

-------------------------------------------------------------------------------
F1 Converter の使い方
-------------------------------------------------------------------------------

Broseボタンでソースファイルを選択して、ソースファイルを選択します。
"Output"チェックボックスで出力するファイルを選択します。

ソースファイルが、F1ファイルかF1Tファイルの場合は、
"Target Hardware"と"Convert"の設定は無効となります。

ソースファイルが、vgm, s98, mdxの場合は、"Target Hardware"の指定が必要で、
"Convert"の設定が有効になります。

"Convert Upload"ボタンでソースファイルを指定のファイル形式に変換して出力します。

"Upload"チェックボックスがオンで、PCにArduinoが接続されている場合、
ArduinoのフラッシュメモリにF1ファイルを転送します。

---------------------------------------------------------------
"Output"チェックボックス
---------------------------------------------------------------

Output F1
F1バイナリファイルを出力します。

Output F1T
テキスト形式のF1Tファイルを出力します。

Output Text F1
F1バイナリファイルをテキスト化したファイルを出力します
テキスト化したファイルは、主にレジスタへのアクセスを調べることが目的です。

Output Dump
F1バイナリファイルを、Ｃ言語の配列に近い形でテキストダンプで出力します。
ターゲットハードウェアのプログラムに組み込みやすいことを想定しています。

ソースファイルがF1バイナリファイルの場合、
出力できる形式は、テキストダンプのみです。
F1ファイルは、音源チップの種類やクロックなどの情報を含まないためです。


---------------------------------------------------------------
Target Hardware
---------------------------------------------------------------

いくつかハードウェアを選択できます。
ハードウェアの定義は、F1 Converter のプロジェクト内に、
XMLで定義してるので簡単な編集で追加や変更が可能です。

F1 Converterは、ソースファイルが対象としている音源チップのうち、
Target Hardwareに含まれている音源チップのデータだけを抽出します。
ソースファイルが対象にしている音源チップが、Target Hardwareの
ハードウェアに含まれていない場合がエラーになります。

F1 Converterは、ソースファイルが対象としている音源チップが
Target Hardwareに含まれている音源チップで代用できれば、
データを加工して変換します。

---------------------------------------------------------------
Convert
---------------------------------------------------------------
設定内容で、変換時にレジスタアクセスデータを制御します。

TimerReg 
音源チップのタイマーと割り込み関連の
レジスタアクセスを含めるかを指定します。

UsePCM
ソースファイルが含む ADPCM、DACPCM のバイナリデータと
レジスタアクセスを含めるかを指定します

Dual 2nd 
ターゲットハードウェアが１つしか音源チップを搭載しておらず、
ソースファイルが２つの同じ音源チップを２つ搭載している場合、
どちらの音源チップのデータを変換対象にするかを指定します。

YM2612 DAC RunLength
連続でYM2612のDACへ書き込む待ち時間を、平均値でRunLengthで圧縮します。

Shrink
ソースファイルで重複しているレジスタアクセスを省くかを指定します。

F.Adjust 
音程レジスタへのレジスタアクセス値を、音源チップのマスタークロックで
計算しなおして、ソースファイルの音程に合うように変換します。

Loop
F1のループ再生回数を指定します。

Wait x
F1 フォーマットの待ち時間にかける倍率を指定します。

FM Vol.
FM音源の音量レジスタへのレジスタアクセス値に係数をかけます。

SSG Vol.
SSG音源の音量レジスタへのレジスタアクセス値に係数をかけます。 

---------------------------------------------------------------
Arduino
---------------------------------------------------------------
PCにArduinoを接続している場合、
ArduinoのフラッシュメモリにF1バイナルファイルを転送します。
Arduino UNO R3とArduino Mega 2560 R3に対応しています。
選択は、ツールメニューのボードで行います。
ツールメニューからシリアルポートの検索ができます。

Serial Port
Arduinoを接続しているシリアルポートを選択します。

Reset
接続しているArduinoをリセットします。

Target Address
F1バイナリファイルを転送するArduinoのフラッシュメモリの開始アドレスを指定します。

注記：私の技術力不足
Arduino Mega 2560 R3では、フラッシュメモリのアドレス０からのバイナリ
転送しかできませんでした。やむをえず、フラッシュメモリのアドレス０から
指定アドレスまでのバイナリをＰＣに転送してＦ１と結合させてから転送しています。

---------------------------------------------------------------
詳細情報
---------------------------------------------------------------
----------------------------------------------
TimerRegの音源チップレジスタアクセスの制御
----------------------------------------------
TimerReg がオフの場合、
ソースファイルに含まれているレジスタアクセスの一部を撤去します。

YM2151
レジスタ10H(CLKA1)、11H(CLKA2)、12H(CLKB)、14H(CSMビット以外)への
アクセスを撤去します。

YM2203、YM2608、YM2612、YM2610、YM2610B、YMF288
レジスタ24H(TIMER-A)、25H(TIMER-A)、26H(TIMER-B)、27H(MODEビット以外）
ヘのアクセスを撤去します。

YM3526、YM3812
レジスタ02H(TIMER-1)、03H(TIMER-2)、04H(RST,MASK,ST2,ST1)への
アクセスを撤去します。

----------------------------------------------
UsePCMの音源チップレジスタアクセスの制御
----------------------------------------------
Use PCM がオフの場合
ソースファイルに含まれているレジスタアクセスの一部を撤去します。
ソースファイルに含まれているDACプレイデータとPCMデータブロックを
F1ファイルに含めないようにします。

YM2608
ADPCMへのレジスタアクセス(A1=1、00Hから10H)を撤去します。

YM2610
ADPCM-Aへのレジスタアクセス(A1=0、10Hから1FH)と
ADPCM-へのレジスタアクセス(A1=1、00Hから2FH)を撤去します。

YM2612
DACへのレジスタアクセス(A1=0、2AHと2BH）を撤去します。

----------------------------------------------
Shrinkの音源チップレジスタアクセスの制御
----------------------------------------------
YM2151
レジスタ28Hから37H、60Hから7FHで同一の値を出力しているレジスタアクセスを撤去します。

YM2203
SSGパートのレジスタ06Hから0AH、FMパートの40Hから4EHで同一の値を出力している
レジスタアクセスを撤去します。FMパートの音程レジスタA0HからA2HとA4HからA6Hで、
他のレジスタアクセスによる保持状態をと合わせて同一の値を出力しているレジスタ
アクセスを撤去します。

YM2413
レジスタ00Hから38Hで同一の値を出力しているレジスタアクセスを撤去します。

YM3526、YM3812、YMF262
レジスタ40Hから55H、A0HからA8H、B0HからB8Hで同一の値を出力しているレジスタアクセスを撤去します。

AY-3-8910
レジスタ06Hから0AHで同一の値を出力しているレジスタアクセスを撤去します。

----------------------------------------------
F.Adjustの音源チップレジスタアクセスの制御
----------------------------------------------

変換時に、音程レジスタへのアクセス値を変更します。
音程レジスタへのアクセス値は、ソースファイルの音源チップの
マスタークロック値で（音源チップによっては、プリスケーラの設定値も含めて）
周波数を求め、ターゲットハードウェアの音源チップのマスタークロック値で
同じ周波数になるように計算します。

AY-3-8910（OPNのSSGを含む）では、トーンとノイズとエンベロープを対象とします。
SN76489 ではトーンとノイズを対象とします。
YM2151では、周波数計算はしていません。3.579575Mhz と4MHzの
２つのテーブルを使った相互変換のみに対応しています。

ソースファイルの音源チップのマスタークロック値が、ターゲットハードウェアの
マスタークロックと大きく異なる場合、周波数を計算できない場合があります。

----------------------------------------------
FM Vol.とSSG Vol.
----------------------------------------------

FMパートでは、オペレータの組み合わせでキャリアと
なるオシレータのTL値に設定値を掛け算しているだけです。
キャリアのオシレータが、Key-OFFとなった場合には対応していません

SSGパートでは、レジスタ08Hから0AHのレベル値に
設定値を掛け算しているだけです。チャンネルがエンベロープレベル
モードの場合は無効です。

----------------------------------------------
その他の音源チップレジスタアクセスの制御
----------------------------------------------
変換時に、ターゲットハードウェアの音源チップのテストレジスタや
未実装レジスタアクセス、また、音に関係しないレジスタアクセス（I/Oなど）は
撤去します。

ソースファイルの音源チップがＦＭパート３チャンネルのYM2203が２つで、
ターゲットハードウェアの音源チップが、ＯＰＮ系でＦＭパート６チャンネルが
可能（YM2608、YM2612、YMF288など）であれば、１つの音源チップでＦＭパートを
再生できるようにレジスタアクセスを変更します。



