-------------------------------------------------------------------------------
F1Tの仕様
-------------------------------------------------------------------------------
F1Tについて
-------------------------------------------------------------------------------
F1Tは、F1バイナリファイルをテキストで記述する形式です

F1Tは、F1バイナリと同様に音源チップのレジスタアクセスとコマンドで記載します。

音源チップのレジスタアクセスを、テキストで記述することができます

-------------------------------------------------------------------------------
数値
-------------------------------------------------------------------------------

10進数、16進数、2進数で表記ができます。
16進数は、数値の前に0xを付加します。
2進数は、数値の前に0bを付加します。

2進数では、区切りを表す"_"と、0の代わりに"x"を使うことができます。
-------------------------------------------------------------------------------
コメント
-------------------------------------------------------------------------------

C言語の /*  */ コメントと、// コメントを使うことができます

-------------------------------------------------------------------------------
１行の構造
-------------------------------------------------------------------------------

アセンブリ言語に似た構造で１行に１つの命令を記述することを基本とします。

１行の構造は、空白で区切られた３つの文字列で構成し、行頭の文字列をラベル、
次の文字列をオペコード、最後の文字列をオペランドと呼びます。

空白は、１つ以上のスペースかタブを使うことができます。
ラベル、オペコード、オペランドはそれぞれ省略することができます。
ラベルを省略する場合は、行頭を空白にします。

-------------------------------------------------------------------------------
全体の構造
-------------------------------------------------------------------------------

先頭にヘッダー構造を記載し、続けてプレイデータ構造を記載します。
必要であれば、続けて、PCMデータブロック構造を記載します。

それぞれの構造は、ラベルを使って構造の開始行を指定します。
ラベルには構造を示す予約語しか記載できません。

-------------------------------------------------------------------------------
ヘッダー構造
-------------------------------------------------------------------------------
ラベルの予約語は、"F1Header:"です。

ヘッダーの構造には、F1バージョン、ループカウント、待ち時間[ns]、
そして、16種類のコマンドコードをオペコードとオペランドで記載します。

記載方法は以下の通りです。（オペコードは仮の値です）

F1Header:
    Version     1.0     // F1バージョン
    LoopCount   3       // ループカウント
    OneWaitNs   22676   // 待ち時間[ns]
    CmdEnd      0xFF    // コマンドコード エンドコード
    CmdA1       0xFE    // コマンドコード A1切り替え
    CmdCS       0xFD    // コマンドコード CS切り替え
    CmdLp       0xFC    // コマンドコード ループポイント
    CmdByteW    0xD0    // コマンドコード 待ち時間 x 1Byte
    CmdWordW    0xD1    // コマンドコード 待ち時間 x 2Bytes
    CmdW1       0xD2    // コマンドコード 待ち時間 x 1
    CmdW2       0xD3    // コマンドコード 待ち時間 x 2
    CmdW3       0xD4    // コマンドコード 待ち時間 x 3
    CmdW4       0xD5    // コマンドコード 待ち時間 x 4
    CmdW5       0xD6    // コマンドコード 待ち時間 x 5
    CmdW6       0xD7    // コマンドコード 待ち時間 x 6
	CmdWrByteW	0xFF    // コマンドコード DAC書き込み待ち時間 x 1Byte
	CmdWrRLW    0xFF    // コマンドコード DAC書き込み待ち時間 ランレングス
	CmdWrSeek   0xFF    // コマンドコード DAC PCM シーク
    CmdF0       0xFF    // コマンドコード フリー0
    CmdF1       0xFF    // コマンドコード フリー1
    CmdF2       0xFF    // コマンドコード フリー2
    CmdF3       0xFF    // コマンドコード フリー3
    CmdF4       0xFF    // コマンドコード フリー4

ヘッダーに必要なオペコードは以上のとおりです。
順番は前後しても問題ありませんが、不足する場合はエラーになります。

バージョンは、メジャーバージョンと
マイナーバージョンをピリオド区切りで記載します。

F1バイナリが必要とする "PCMデータブロックへのオフセット"は、
F1バイナリへの変換時にアドレス計算されて埋め込まれます。

-------------------------------------------------------------------------------
プレイデータ構造
-------------------------------------------------------------------------------
ラベルの予約語は、"F1PlayData:"です。

プレイデータは、コマンドデータと
レジスタアクセスデータを楽曲再生に合わせて順番に並べます。

------------------------------------
コマンドデータ
------------------------------------

End

    楽曲終了です。
    プレイデータ内にループポイントが配置されている場合、再生位置を
    ループポイントに移動します。ループ回数はヘッダーで指定します。


ChCS    [CS番号]

    アクセス対象となる音源チップを、ＣＳ番号の値に変更します。


ChA1    [A1番号]

    音源チップのA1フラグを、A1番号に変更します。

LoopPoint

    プレイデータ内で、楽曲のループ位置を指定するコマンドです。

Wait   [待ち時間]

    プレイデータ内での待ち時間間隔を、待ち時間で指定します。
    待ち時間間隔は、ヘッダーの"待ち時間[ns]"×[待ち時間]です。
    F1バイナリへの変換時に、F1バイナリのサイズに最適な待ち時間間隔
    コマンドに置き換わります。

WrWait       [待ち時間]

    PCMバイナリのポインタから、１バイトのデータを音源チップに出力し
    プレイデータ内での待ち時間間隔を、待ち時間で指定します。
    待ち時間間隔は、ヘッダーの"待ち時間[ns]"×[待ち時間]です。

WrWaitRL     [待ち時間], [繰り返し回数]

    PCMバイナリのポインタから、１バイトのデータを音源チップに出力し
    プレイデータ内での待ち時間間隔を、待ち時間で指定します。
    待ち時間間隔は、ヘッダーの"待ち時間[ns]"×[待ち時間]です。
    出力と待ちを指定回数で繰り返します。

WrSeek       [アドレス]

    PCMバイナリのポインタを[アドレス]にします。
    アドレスは、PCMデータ内でのオフセットです。

------------------------------------
レジスタアクセスデータのオペコード
------------------------------------
レジスタアクセスデータは、音源チップによって構造は異なるため
オペコードに、数値を記載します
数値は、カンマ区切りで複数個を記載できます。

2バイト  レジスタ番号と値の例
        0x0A, 0x00, // レジスタ 0A に数値 00 を書き込む
        0x10, 0xBF,	// レジスタ 10 に数値 BF を書き込む

1バイト  値だけの例
        0x80,       // 音源チップに、数値 80 を書き込む
        0x00,       // 音源チップに、数値 00 を書き込む

-------------------------------------------------------------------------------
PCMデータブロック構造
-------------------------------------------------------------------------------

ラベルの予約語は、"F1PcmData:"です。

------------------------------------
PCMデータブロックのヘッダ
------------------------------------

オペコードは"PcmHeader"でオペランドに、
チップセレクト値とデータタイプ、開始アドレスをカンマ区切りで指定します。

例：
    PcmHeader    0, 0x00, 0x00000000

チップセレクト値は、PCMプレイデータを使う音源チップの番号です。
データタイプは、音源チップが搭載するPCM機能の識別の値で音源チップに依存します。
開始アドレスは、PCMバイナリデータをロードするターゲットハードウェア上の
メモリアドレスを指定します。

------------------------------------
PCMデータブロックのバイナリ
------------------------------------

data   [バイナリ].....

バイナリデータを、バイト値でカンマ区切りで記載します。

